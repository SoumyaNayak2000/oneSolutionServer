import { NextFunction, Request, Response } from "express";

export interface NewUserRequestBody {
  _id: string;
  name: string;
  email: string;
  photo: string;
  gender: string;
  dob: Date;
}

/*The `NewUserRequestBody` interface defines the structure of the request body expected when creating a new user in an application. It specifies the properties that must be included in the request body and their respective data types.

Here's an explanation of the properties defined in the `NewUserRequestBody` interface:
1. `_id`: A string representing the unique identifier for the user. This is typically generated by the application or client-side code.
2. `name`: A string representing the name of the user.
3. `email`: A string representing the email address of the user.
4. `photo`: A string representing the URL or path to the user's profile photo.
5. `gender`: A string representing the gender of the user (e.g., "male", "female", "other").
6. `dob`: A Date object representing the date of birth of the user.

By defining the `NewUserRequestBody` interface, the application can enforce a specific structure for the request body when creating a new user. This helps in ensuring that the necessary data is provided in the correct format, making the API more predictable and easier to work with for developers consuming the API.*/

export type ControllerType = (
  req: Request,
  res: Response,
  next: NextFunction
) => Promise<void | Response<any, Record<string, any>>>;

/* The `ControllerType` type alias defines the structure of a controller function that can be used in an Express application. It specifies the parameters that the controller function should accept and the type of value it should return.

Here's an explanation of the `ControllerType` type alias:
- `(req: Request, res: Response, next: NextFunction)`: This part specifies that the controller function should accept three parameters:
  1. `req`: An Express `Request` object representing the incoming request.
   2. `res`: An Express `Response` object representing the outgoing response.
   3. `next`: The Express `NextFunction` that is used to pass control to the next middleware function.

 - `=> Promise<void | Response<any, Record<string, any>>>`: This part specifies that the controller function should return a `Promise` that resolves to either `void` (indicating that the function does not return anything) or an Express `Response` object with a generic type `Response<any, Record<string, any>>`.

   - `void`: Represents that the function does not return any specific value.
   - `Response<any, Record<string, any>>`: Represents an Express `Response` object with a generic type that can have any body type (`any`) and headers of type `Record<string, any>`.

 By defining the `ControllerType` type alias, it provides a clear and standardized way to define controller functions in Express applications, ensuring consistency in the parameters accepted and the return type expected from these functions.*/
